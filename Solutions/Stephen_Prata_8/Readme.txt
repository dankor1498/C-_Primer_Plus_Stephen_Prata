1. Напишите функцию, которая обычно принимает один аргумент — адрес строки
и выводит эту строку один раз. Однако если задан второй аргумент типа int, не
равный нулю, то эта функция выводит строку столько раз, сколько было осуществлено 
вызовов этой функции к моменту ее данного вызова. (Обратите внимание,
что количество выводимых строк не равно значению второго аргумента, оно
равно числу вызовов функции к моменту последнего вызова.) Действительно,
это не слишком полезная функция, но она заставит применить некоторые из
методов, рассмотренных в данной главе. Напишите простую программу для 
демонстрации этой функции.

2. Структура CandyBar содержит три члена. Первый член хранит название коробки
конфет. Второй — ее вес (который может иметь дробную часть), а третий — количество 
калорий (целое значение). Напишите программу, использующую функцию, которая принимает 
в качестве аргументов ссылку на CandyBar, указатель
на char, значение double и значение int. Функция использует три последних
значения для установки соответствующих членов структуры. Три последних аргумента 
должны иметь значения по умолчанию: "Millennium Munch", 2.85 и 350.
Кроме того, программа должна использовать функцию, которая принимает в качестве а
ргумента ссылку на CandyBar и отображает содержимое этой структуры.
Где необходимо, используйте const.

3. Напишите функцию, которая принимает ссылку на объект string в качестве
параметра и преобразует содержимое string в символы верхнего регистра.
Используйте функцию toupper(). Напишите программу, использующую цикл, 
которая позволяет проверить работу функции
для разного ввода. Пример вывода может выглядеть следующим образом:
Enter a string (q to quit): go away
GO AWAY
Next string (q to quit) : good grief!
GOOD GRIEF!
Next string (q to quit) : q
Bye.

4. Ниже представлена общая структура программы:
#include <iostream>
using namespace std;
#include <cstring> // для strlen(), strcpy()

struct stringy {
	char * str; //указывает на строку
	int ct; //длина строки (не считая символа '\0')
};

// Здесь размещаются прототипы функций set() и show()

int main()
{
	stringy beany;
	char testing [] = "Reality isn't what it used to be.";
	set(beany, testing); // первым аргументом является ссылка,
	// Выделяет пространство для хранения копии testing,
	// использует элемент типа str структуры beany как указатель
	// на новый блок, копирует testing в новый блок и
	// создает элемент ct структуры beany
	show(beany); // выводит строковый член структуры один раз
	show (beany, 2); // выводит строковый член структуры два раза
	testing[0] = 'D';
	tetesting[1] = 'u';
	show(testing); // выводит сроку testing один раз
	show(testing, 3); // выводит строку testing три раза
	show("Done!");
	return 0;
}

Завершите программу, создав соответствующие функции и прототипы. Обратите
внимание, что в программе должны быть две функции show(), и каждая из
них использует аргументы по умолчанию. Где необходимо, используйте const.
Функция set() должна использовать операцию new для выделения достаточного 
пространства памяти под хранение заданной строки. Используемые здесь
методы аналогичны методам, применяемым при проектировании и реализации
классов. (В зависимости от используемого компилятора, может понадобиться 
изменить имена заголовочных файлов и удалить директиву using.)

5. Напишите шаблонную функцию mах5(), которая принимает в качестве аргумента 
массив из пяти элементов типа Т и возвращает наибольший элемент в массиве. 
(Поскольку размер массива фиксирован, его можно жестко закодировать в
цикле, а не передавать в виде аргумента.) Протестируйте функцию в программе 
с использованием массива из пяти значений int и массива из пяти значений
double.

6. Напишите шаблонную функцию maxn(), которая принимает в качестве аргумента 
массив элементов типа Т и целое число, представляющее количество элементов 
в массиве, а возвращает элемент с наибольшим значением. Протестируйте
ее работу в программе, которая использует этот шаблон с массивом из шести
значений int и массивом из четырех значений double. Программа также 
должна включать специализацию, которая использует массив указателей 
на char в качестве первого аргумента и количество указателей — в 
качестве второго, а затем возвращает адрес самой длинной строки. 
Если имеется более одной строки наибольшей длины, функция должна вернуть 
адрес первой из них. Протестируйте специализацию на массиве из пяти 
указателей на строки.

7. Измените программу из листинга 8.14 так, чтобы использовать две шаблонных
функции по имени SumArray(), возвращающие сумму содержимого массива вместо 
его отображения. Программа должна сообщать общее количество предметов
и сумму всех задолженностей (debts).