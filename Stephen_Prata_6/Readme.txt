1. Напишите программу, которая читает клавиатурный ввод до символа @ и повторяет его, 
за исключением десятичных цифр, преобразуя каждую букву верхнего
регистра в букву нижнего регистра и наоборот. (Не забудьте о семействе функций cctype.)

2. Напишите программу, читающую в массив double до 10 значений пожертвований. 
(Или, если хотите, используйте шаблонный объект array.) Программа
должна прекращать ввод при получении нечисловой величины. Она должна
выдавать среднее значение полученных чисел, а также количество значений в
массиве, превышающих среднее.

3. Напишите предшественник программы, управляемой меню. Она должна
отображать меню из четырех пунктов, каждый из них помечен буквой. Если
пользователь вводит букву, отличающуюся от четырех допустимых, программа
должна повторно приглашать его ввести правильное значение до тех пор, пока
он этого не сделает. Затем она должна выполнить некоторое простое действие
на основе пользовательского выбора. Работа программы должна выглядеть примерно так:
Please enter one of the following choices:
c) carnivore  p) pianist
t) tree       g) game
f
Please enter a c, p, t, or g: q
Please enter a c, p, t, or g: t
A maple is a tree.

4. Когда вы вступите в Благотворительный Орден Программистов (БОП), к вам
могут обращаться на заседаниях БОП по вашему реальному имени, по должности 
либо секретному имени БОП. Напишите программу, которая может выводить списки 
членов по реальным именам, должностям, секретным именам либо
по предпочтению самого члена. В основу положите следующую структуру:
// Структура имен Благотворительного Ордена Программистов (БОП)
struct bop {
	char fullname[strsize] // реальное имя
	char title[strsize];   // должность
	char bopname[strsize]; // секретное имя БОП
	int preference;        // 0 = полное имя, 1 = титул, 2 = имя БОП
};
В этой программе создайте небольшой массив таких структур и инициализируйте его 
соответствующими значениями. Пусть программа запустит цикл, который даст возможность 
пользователю выбирать разные альтернативы:
a. display by name    b. display by title
c. display by bopname d. display by preference
q. quit
Обратите внимание, что “display by preference” (отображать по предпочтениям)
не означает, что нужно отобразить член preference; это значит, что необходимо 
отобразить член структуры, который соответствует значению preference.
Например, если preference равно 1, то выбор d должен вызвать отображение
должности данного программиста. Пример запуска этой программы может 
выглядеть следующим образом:

Benevolent Order of Programmers Report
a. display by name    b. display by title
c. display by bopname d. display by preference
q. quit
Enter your choice: a
Wimp Macho
Raki Rhodes
Celia Laiter
Hoppy Hipman
Pat Hand
Next choice: d
Wimp Macho
Junior Programmer
MIPS
Analyst Trainee
LOOPY
Next choice: q
Bye!

5. Королевство Нейтрония, где денежной единицей служит тварп, использует следующую шкалу 
налогообложения:
первые 5 000 тварпов — налог 0%
следующие 10 000 тварпов — налог 10%
следующие 20 000 тварпов — налог 15%
свыше 35 000 тварпов — налог 20%
Например, если некто зарабатывает 38 000 тварпов, то он должен заплатить налогов 
5000 х 0,00 + 10000 х 0,10 + 20000 х 0,15 + 3000 х 0,20, или 4600 тварпов.
Напишите программу, которая использует цикл для запроса доходов и выдачи
подлежащего к выплате налога. Цикл должен завершаться, когда пользователь
вводит отрицательное или нечисловое значение.

6. Постройте программу, которая отслеживает пожертвования в Общество
Защиты Влиятельных Лиц. Она должна запрашивать у пользователя количество меценатов, а затем 
приглашать вводить их имена и суммы пожертвований от
каждого. Информация должна сохраняться в динамически выделяемом массиве
структур. Каждая структура должна иметь два члена: символьный массив (или
объект string ) для хранения имени и переменную-член типа double — для
хранения суммы пожертвования. После чтения всех данных программа должна
отображать имена и суммы пожертвований тех, кто не пожалел $10 000 и более. Этот список 
должен быть озаглавлен меткой “Grand Patrons”. После этого
программа должна выдать список остальных жертвователей. Он должен быть
озаглавлен “Patrons”. Если в одной из двух категорий не окажется никого, программа 
должна напечатать “попе”. Помимо отображения двух категорий, никакой другой 
сортировки делать не нужно.

7. Напишите программу, которая читает слова по одному за раз, пока не будет 
введена отдельная буква q. После этого программа должна сообщить количество
слов, начинающихся с гласных, количество слов, начинающихся с согласных,
а также количество слов, не попадающих ни в одну из этих категорий. Одним
из возможных подходов может быть применение isalpha() для различения
слов, начинающихся с букв, и остальных, с последующим применением if или
switch для идентификации тех слов, прошедших проверку isalpha(), которые 
начинаются с гласных. Пример запуска может выглядеть так:
Enter words (q to quit):
The 12 awesome oxen ambled
quietly across 15 meters of lawn, q
5 words beginning with vowels
4 words beginning with consonants
2 others

8. Напишите программу, которая открывает текстовый файл, читает его символ
за символом до самого конца и сообщает количество символов в файле.

9. Выполните упражнение 6, но измените его так, чтобы данные можно было получать 
из файла. Первым элементом файла должно быть количество меценатов,
а остальная часть состоять из пар строк, в которых первая строка содержит
имя, а вторая — сумму пожертвования. То есть файл должен выглядеть примерно так:
4
Sam Stone
2000
Freida Flass
100500
Tammy Tubbs
5000
Rich Raptor
55000